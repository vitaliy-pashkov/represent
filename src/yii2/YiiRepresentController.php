<?php

namespace app\vpashkov\represent\yii2;

use app\vpashkov\represent\helpers\H;
use yii\web\Controller;

class YiiRepresentController extends Controller
	{
	public string $representName;
	public bool $collectDicts = true;
	public bool $collectCount = true;
	public bool $collectMeta = false;
	public array $params;
	public ?string $dictName;

	public function beforeAction($action)
		{
		$this->collectParams();
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
		}

	public function collectParams()
		{
		$getParams = \Yii::$app->request->get();
		$rawPost = \Yii::$app->request->getRawBody();
		$post = json_decode($rawPost, true);


		$this->representName = H::get($getParams, 'represent');
		$this->collectDicts = H::get($getParams, 'dicts', 'true');
		$this->dictName = H::get($getParams, 'dict', null);

		$this->params = $post === null ? [] : $post;

		}

	public function actionOne()
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$response = [];
		$response['data'] = $represent->one();
		if ($this->collectDicts)
			{
			$response['dicts'] = $represent->dicts();
			}
		return $this->createResponse($response);
		}

	public function actionAll($represent, $count = false, $dicts = false, $meta = false)
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$response = [];
		$response['data'] = $represent->all();
		if ($this->collectCount)
			{
			$response['count'] = $represent->count();
			}
		if ($this->collectDicts)
			{
			$response['dicts'] = $represent->dicts();
			}
		if ($this->collectMeta)
			{
			$response['meta'] = $represent->meta();
			}
		return $this->createResponse($response);
		}

	public function actionSave()
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$status = ['status' => 'fail'];
		if (array_key_exists('rows', $this->params))
			{
			$status = $represent->saveAll($this->params['rows']);
			}
		elseif (array_key_exists('row', $this->params))
			{
			$status = $represent->saveOne($this->params['row']);
			}
		return $this->createResponse($status);
		}

	public function actionDelete()
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$status = ['status' => 'fail'];

		if (array_key_exists('rows', $this->params))
			{
			$status = $represent->deleteAll($this->params['rows']);
			}
		elseif (array_key_exists('row', $this->params))
			{
			$status = $represent->deleteOne($this->params['row']);
			}
		return $this->createResponse($status);
		}

	public function actionDicts()
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$dicts = $represent->dicts();
		return $this->createResponse($dicts);
		}

	public function actionDict()
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		$dict = $represent->dict($this->dictName);
		return $this->createResponse($dict);
		}

	public function actionMeta($represent)
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		return $this->createResponse($represent->meta());
		}

	public function actionCount($represent)
		{
		$represent = YiiRepresent::byName($this->representName, $this->params);
		return $this->createResponse($represent->count());
		}

	protected function createResponse($data)
		{
		$response = \Yii::$app->response;
		$response->format = \Yii\web\Response::FORMAT_JSON;
		$response->data = $data;
		return $response;
		}

	}
    
